# -*- encoding : utf-8 -*-
require 'spec_helper'
include ManifestationsHelper

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BooksController do
  #Login a test user with admin rights
  before(:each) do
    login_admin
  end

  # This should return the minimal set of attributes required to create a valid
  # Book. As you add validations to Book, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { :genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504073',
      :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
      :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
      :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
      :subjectTopic => 'N8217.H68', :physicalExtent => '510'}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BooksController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe 'GET index' do
    it 'assigns all books as @books' do
      book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504073',
                          :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                          :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                          :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                          :subjectTopic => 'N8217.H68', :physicalExtent => '510')
      get :index, {}, valid_session
      assigns(:books).should include book
    end
  end

  describe 'GET show' do
    it 'assigns the requested book as @book' do
      book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504074',
                          :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                          :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                          :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                          :subjectTopic => 'N8217.H68', :physicalExtent => '510')
      get :show, {:id => book.to_param}, valid_session
      assigns(:book).should eq(book)
    end
  end

  describe 'GET new' do
    it 'assigns a new book as @book' do
      get :new, {}, valid_session
      assigns(:book).should be_a_new(Book)
    end
  end

  describe 'GET edit' do
    it 'assigns the requested book as @book' do
      book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504075',
                          :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                          :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                          :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                          :subjectTopic => 'N8217.H68', :physicalExtent => '510')
      get :edit, {:id => book.to_param}, valid_session
      assigns(:book).should eq(book)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Book' do
        attributes = { :genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '7787504073',
                       :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                       :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                       :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                       :subjectTopic => 'N8217.H68', :physicalExtent => '510'}
        expect {
          post :create, {:book => attributes}, valid_session
        }.to change(Book, :count).by(1)
      end

      it 'assigns a newly created book as @book' do
        attributes = { :genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '7747504073',
                       :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                       :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                       :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                       :subjectTopic => 'N8217.H68', :physicalExtent => '510'}
        post :create, {:book => attributes}, valid_session
        assigns(:book).should be_a(Book)
        assigns(:book).should be_persisted
      end

      it 'redirects to the created book' do
        #pending 'TODO: Need to work out why this test passes locally but not on Jenkins'
        attributes = { :genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '4787504073',
                       :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                       :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                       :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                       :subjectTopic => 'N8217.H68', :physicalExtent => '510'}
        post :create, {:book => attributes}, valid_session
        response.should redirect_to(Book.all.last)
      end

      describe 'with a Tei representation' do
        let(:representation) { SingleFileRepresentation }

        before :all do
          @book_attributes = { :title => 'Samlede Skrifter'}
          @tei_file_attributes = { :tei_file => ActionDispatch::Http::UploadedFile.new(filename: 'aarrebo_tei_p5_sample.xml', type: 'text/xml', tempfile:
              File.new("#{Rails.root}/spec/fixtures/aarrebo_tei_p5_sample.xml"))}
        end
        it 'should create the book' do
          expect {
            post :create, {:book => @book_attributes , :file => @tei_file_attributes }, valid_session
          }.to change(Book, :count).by(1)
        end
        it 'should create a Tei representation' do
          expect {
            post :create, {:book => @book_attributes , :file => @tei_file_attributes }, valid_session
          }.to change(representation, :count).by(1)
        end
        it 'should not create a tiff representation' do
          expect {
            post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          }.not_to change(representation, :count)
        end
        it 'should create a basic file' do
          expect {
            post :create, {:book => @book_attributes , :file => @tei_file_attributes }, valid_session
          }.to change(TeiFile, :count).by(1)
        end
        it 'should not create a tifffile' do
          expect {
            post :create, {:book => @book_attributes , :file => @tei_file_attributes }, valid_session
          }.not_to change(TiffFile, :count)
        end
        it 'should create a relation between book and tei-representation' do
          post :create, {:book => @book_attributes , :file => @tei_file_attributes }, valid_session
          Book.all.last.has_rep?.should be_true
          representation.all.last.has_ie?.should be_true
          Book.all.last.single_file_reps.length.should == 1
          Book.all.last.single_file_reps.first.should == representation.all.last
          representation.all.last.ie.should == Book.all.last
        end
        it 'should create a relation between tei-representation and basic-file' do
          post :create, {:book => @book_attributes , :file => @tei_file_attributes }, valid_session
          representation.all.last.files.length.should == 1
          representation.all.last.files.first.should == TeiFile.all.last
        end
        it 'should create a metadata for tei-representation' do
          post :create, {:book => @book_attributes , :file => @tei_file_attributes, :representation_metadata => {:label => 'The label'}}, valid_session
          representation.all.last.files.length.should == 1
          representation.all.last.files.first.should == TeiFile.all.last
          representation.all.last.label.should == 'The label'
        end
      end

      describe 'with a Tiff representation but without a structmap' do
        let(:representation) { OrderedRepresentation }
        before :all do
          @book_attributes = { :title => 'Samlede Skrifter'}
          @tiff_file_attributes = { :tiff_file => [ActionDispatch::Http::UploadedFile.new(filename: 'test.tiff', type: 'image/tiff',
                                                                                          tempfile: File.new("#{Rails.root}/spec/fixtures/arre1fm001.tif"), head: 'Content-Disposition: form-data; name=\'file[tiff_file][]\'; filename=\'arre1fm005.tif\'\r\nContent-Type: image/tiff\r\n')]}
        end
        it 'should create the book' do
          expect {
            post :create, {:book => @book_attributes , :file => @tiff_file_attributes }, valid_session
          }.to change(Book, :count).by(1)
        end
        it 'should create a Tiff representation' do
          expect {
            post :create, {:book => @book_attributes , :file => @tiff_file_attributes }, valid_session
          }.to change(representation, :count).by(1)
        end
        it 'should not create a tei representation' do
          expect {
            post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          }.not_to change(representation, :count)
        end
        it 'should create a tiff file' do
          expect {
            post :create, {:book => @book_attributes , :file => @tiff_file_attributes }, valid_session
          }.to change(TiffFile, :count).by(1)
        end
        it 'should not create a basic file for the struct map' do
          expect {
            post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          }.not_to change(BasicFile, :count)
        end
        it 'should create a relation between book and tiff-representation' do
          post :create, {:book => @book_attributes , :file => @tiff_file_attributes }, valid_session
          Book.all.last.has_rep?.should be_true
          representation.all.last.has_ie?.should be_true
          Book.all.last.ordered_reps.length.should == 1
          Book.all.last.ordered_reps.first.should == representation.all.last
          representation.all.last.ie.should == Book.all.last
        end
        it 'should create a relation between tiff-representation and basic-file' do
          post :create, {:book => @book_attributes , :file => @tiff_file_attributes }, valid_session
          representation.all.last.files.length.should == 1
          representation.all.last.files.first.should == TiffFile.all.last
        end

        it 'should create a relation between tiff-representation and basic-file' do
          post :create, {:book => @book_attributes , :file => @tiff_file_attributes }, valid_session
          representation.all.last.files.length.should == 1
          representation.all.last.files.first.should == TiffFile.all.last
        end
      end

      describe 'with a Tiff representation' do
        let(:representation) { OrderedRepresentation }

        before :all do
          @book_attributes = { :title => 'Samlede Skrifter'}
          @file_attributes = { :tiff_file => [ActionDispatch::Http::UploadedFile.new(filename: 'test.tiff', type: 'image/tiff',
                                                                                     tempfile: File.new("#{Rails.root}/spec/fixtures/arre1fm001.tif"),
                                                                                     head: 'Content-Disposition: form-data; name=\'file[tiff_file][]\'; filename=\'arre1fm005.tif\'\r\nContent-Type: image/tiff\r\n')]}
        end
        it 'should create the book' do
          expect {
            post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          }.to change(Book, :count).by(1)
        end
        it 'should not create a tei representation' do
          expect {
            post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          }.not_to change(SingleFileRepresentation, :count)
        end
        it 'should create a Tiff representation' do
          expect {
            post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          }.to change(representation, :count).by(1)
        end
        it 'should create a tiff file for the tiff representation' do
          expect {
            post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          }.to change(TiffFile, :count).by(1)
        end
        it 'should create a relation between book and tiff-representation' do
          post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          Book.all.last.has_rep?.should be_true
          representation.all.last.has_ie?.should be_true
          Book.all.last.ordered_reps.length.should == 1
          Book.all.last.ordered_reps.first.should == representation.all.last
          representation.all.last.ie.should == Book.all.last
        end

        it 'should create a relation between tiff-representation and struct-map' do
          #pending 'Need to test the addition of a structmap file to a BookTiffRepresentation after a structmap is generated'
          post :create, {:book => @book_attributes , :file => @file_attributes }, valid_session
          representation.all.last.files.length.should == 1
          representation.all.last.files.first.should == TiffFile.all.last
        end
      end

      describe 'with an author' do
        let(:representation) { OrderedRepresentation }
        before :all do
          @author = Person.create(firstname:'the firstname', lastname:'the lastname', :date_of_birth => Time.now.nsec.to_s)
          @book_attributes = { :title => 'Samlede Skrifter'}
          @person_attributes = { :id => ['', @author.id]}
        end
        it 'should create the book' do
          expect {
            post :create, {:book => @book_attributes , :person => @person_attributes }, valid_session
          }.to change(Book, :count).by(1)
        end
        it 'should not create a Tiff representation' do
          expect {
            post :create, {:book => @book_attributes , :person => @person_attributes }, valid_session
          }.not_to change(representation, :count)
        end
        it 'should not create a tiff file for the tiff representation' do
          expect {
            post :create, {:book => @book_attributes , :person => @person_attributes }, valid_session
          }.not_to change(TiffFile, :count)
        end
        it 'should not create a basic file' do
          expect {
            post :create, {:book => @book_attributes , :person => @person_attributes }, valid_session
          }.not_to change(BasicFile, :count)
        end
        it 'should have no relations to any representation' do
          post :create, {:book => @book_attributes , :person => @person_attributes }, valid_session
          Book.all.last.has_rep?.should be_false
        end
        it 'should create a relation between book and person' do
          post :create, {:book => @book_attributes , :person => @person_attributes }, valid_session
          Book.all.last.authors.length.should == 1
          Book.all.last.authors.first.should == @author
          Person.all.last.authored_books.should include(Book.all.last)
        end
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved book as @book' do
        # Trigger the behavior that occurs when invalid params are submitted
        Book.any_instance.stub(:save).and_return(false)
        post :create, {:book => {:title => 'Samlede Skrifter', :isbn => '2227504073' }}, valid_session
        assigns(:book).should be_a_new(Book)
      end

      it 're-renders the \'new\' template' do
        # Trigger the behavior that occurs when invalid params are submitted
        Book.any_instance.stub(:save).and_return(false)
        post :create, {:book => {  }}, valid_session
        response.should render_template('new')
      end

      it 'should not allow empty set of parameters' do
        post :create, {}
        response.should render_template('new')
      end

      it 'should not allow empty set of parameters' do
        post :create, {}
        response.should render_template('new')
      end

      it 'should not allow any non-image file as tiff representation' do
        post :create, { :book => @book_attributes, :file => { :tiff_file => [ActionDispatch::Http::UploadedFile.new(filename: 'test.xml', type: 'text/xml', tempfile: File.new("#{Rails.root}/spec/fixtures/aarebo_mets_structmap_sample.xml"))]}}
        response.should render_template('new')
      end
      it 'should not allow a non-xml file as tei representation' do
        post :create, { :book => @book_attributes, :file => { :tei_file => ActionDispatch::Http::UploadedFile.new(filename: 'test.tiff', type: 'image/tiff', tempfile: File.new("#{Rails.root}/spec/fixtures/arre1fm001.tif"))}}
        response.should render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      it 'updates the requested book' do
        book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504076',
                            :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                            :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                            :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                            :subjectTopic => 'N8217.H68', :physicalExtent => '510')
        # Assuming there are no other books in the database, this
        # specifies that the Book created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Book.any_instance.should_receive(:update_attributes).with({ 'these' => 'params' })
        put :update, {:id => book.to_param, :book => { 'these' => 'params' }}, valid_session
      end

      it 'assigns the requested book as @book' do
        book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504077',
                            :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                            :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                            :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                            :subjectTopic => 'N8217.H68', :physicalExtent => '510')
        attributes = { :genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '4780004073',
                       :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                       :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                       :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                       :subjectTopic => 'N8217.H68', :physicalExtent => '510'}
        put :update, {:id => book.to_param, :book => attributes}, valid_session
        assigns(:book).should eq(book)
      end

      it 'redirects to the book' do
        book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504078',
                            :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                            :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                            :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                            :subjectTopic => 'N8217.H68', :physicalExtent => '510')
        attributes = { :genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '4345504073',
                       :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                       :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                       :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                       :subjectTopic => 'N8217.H68', :physicalExtent => '510'}
        put :update, {:id => book.to_param, :book => attributes}, valid_session
        response.should redirect_to(book)
      end

      it 'should add a tiff representation of the book' do
        valid_params = {:title => 'title'}
        book = Book.create!(valid_params)
        book.representations.length.should == 0
        post :update, { :id => book.to_param, :book => valid_params, :file => { :tiff_file => [ActionDispatch::Http::UploadedFile.new(filename: 'test.tiff', type: 'image/tiff', tempfile: File.new("#{Rails.root}/spec/fixtures/arre1fm001.tif"))]}}, valid_session
        response.should redirect_to(book)

        b = Book.find(book.pid)
        b.representations.length.should == 1
      end
    end

    describe 'with invalid params' do
      it 'assigns the book as @book' do
        book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504079',
                            :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                            :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                            :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                            :subjectTopic => 'N8217.H68', :physicalExtent => '510')
        # Trigger the behavior that occurs when invalid params are submitted
        Book.any_instance.stub(:save).and_return(false)
        put :update, {:id => book.to_param, :book => {  }}, valid_session
        assigns(:book).should eq(book)
      end

      it 're-renders the \'edit\' template' do
        book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504070',
                            :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                            :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                            :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                            :subjectTopic => 'N8217.H68', :physicalExtent => '510')
        # Trigger the behavior that occurs when invalid params are submitted
        Book.any_instance.stub(:save).and_return(false)
        put :update, {:id => book.to_param, :book => {  }}, valid_session
        response.should render_template('edit')
      end

      it 'should not allow a non-xml file as description' do
        book = Book.create!(:title => 'title')
        post :update, { :id => book.to_param, :file => { :tei_file => ActionDispatch::Http::UploadedFile.new(filename: 'test.tiff', type: 'image/tiff', tempfile: File.new("#{Rails.root}/spec/fixtures/arre1fm001.tif"))}}
        response.should render_template('edit')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested book' do
      book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504071',
                          :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                          :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                          :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                          :subjectTopic => 'N8217.H68', :physicalExtent => '510')
      expect {
        delete :destroy, {:id => book.to_param}, valid_session
      }.to change(Book, :count).by(-1)
    end

    it 'redirects to the books list' do
      book = Book.create!(:genre => 'Valhal bog', :uuid => 'urn:uuid:53246d30-34b4-11e2-81c1-0800200c9a66', :isbn => '8787504072',
                          :typeOfResource =>'text', :shelfLocator => 'Pligtaflevering', :title => 'Samlede Skrifter', :subTitle => 'Bd. 1',
                          :publisher => 'Det Danske Sprog og Litteraturselskab', :originPlace => 'Copenhagen',
                          :dateIssued => '2002-10-02T10:00:00-05:00', :languageISO => 'dan', :languageText => 'DANSK',
                          :subjectTopic => 'N8217.H68', :physicalExtent => '510')
      delete :destroy, {:id => book.to_param}, valid_session
      response.should redirect_to(books_url)
    end
  end

  describe 'create structmap' do
    before(:each) do
      @book = Book.create!(:title => 'test title')
      @tiff1 = ActionDispatch::Http::UploadedFile.new(filename: 'first.tiff', type: 'image/tiff', tempfile: File.new("#{Rails.root}/spec/fixtures/arre1fm001.tif"))
      @tiff2 = ActionDispatch::Http::UploadedFile.new(filename: 'second.tiff', type: 'image/tiff', tempfile: File.new("#{Rails.root}/spec/fixtures/arre1fm001.tif"))
    end
    it 'should create a new structmap order from list of files' do
      add_tiff_order_rep([@tiff1, @tiff2], {}, @book)

      b = Book.find(@book.pid)
      b.representations.length.should == 1
      b.representations.first.is_a?(OrderedRepresentation).should be_true
      b.representations.first.files.length.should == 2
      b.representations.first.files.first.original_filename.should == @tiff1.original_filename
      b.representations.first.files.last.original_filename.should == @tiff2.original_filename
      before_xml = b.representations.first.techMetadata.ng_xml.to_s
      before_xml.index(@tiff1.original_filename).should be < before_xml.index(@tiff2.original_filename)

      put :create_structmap, {:id => @book.pid, :structmap_file_order => @tiff2.original_filename + ',' + @tiff1.original_filename}
      response.should redirect_to(@book)

      b = Book.find(@book.pid)
      b.representations.length.should == 1
      b.representations.first.is_a?(OrderedRepresentation).should be_true
      b.representations.first.files.length.should == 2
      before_xml = b.representations.first.techMetadata.ng_xml.to_s
      before_xml.index(@tiff1.original_filename).should be > before_xml.index(@tiff2.original_filename)
    end

    it 'should not change structmap when no list of files' do
      add_tiff_order_rep([@tiff1, @tiff2], {}, @book)

      b = Book.find(@book.pid)
      b.representations.length.should == 1
      b.representations.first.is_a?(OrderedRepresentation).should be_true
      b.representations.first.files.length.should == 2
      b.representations.first.files.first.original_filename.should == @tiff1.original_filename
      b.representations.first.files.last.original_filename.should == @tiff2.original_filename
      before_xml = b.representations.first.techMetadata.ng_xml.to_s
      before_xml.index(@tiff1.original_filename).should be < before_xml.index(@tiff2.original_filename)

      put :create_structmap, {:id => @book.pid}
      response.should redirect_to(@book)

      b = Book.find(@book.pid)
      b.representations.length.should == 1
      b.representations.first.is_a?(OrderedRepresentation).should be_true
      b.representations.first.files.length.should == 2
      before_xml = b.representations.first.techMetadata.ng_xml.to_s
      before_xml.index(@tiff1.original_filename).should be < before_xml.index(@tiff2.original_filename)
    end

  end

  after(:all) do
    Book.all.each { |book| book.delete }
    BasicFile.all.each { |bf| bf.delete }
    TiffFile.all.each { |tf| tf.delete }
    Person.all.each { |p| p.delete }
    SingleFileRepresentation.all.each { |dr| dr.delete }
    OrderedRepresentation.all.each { |rep| rep.delete }
  end

end
