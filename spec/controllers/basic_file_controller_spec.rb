# -*- encoding : utf-8 -*-
require 'spec_helper'
include ManifestationsHelper

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BasicFilesController do
  #Login a test user with admin rights
  before(:each) do
    login_admin
  end

  describe 'GET show' do
    it 'assigns the requested file as @file' do
      file = create_basic_file(nil)
      get :show, {:id =>file.to_param}
      assigns(:file).should eq(file)
    end
  end

  describe 'GET download' do
    it 'should be possible to download the file' do
      file = create_basic_file(nil)
      get :download, {:id => file.pid}
      response.status.should == 200
    end

    it 'should give a 404 error when pointing to non-existing id' do
      file = create_basic_file(nil)
      id = "#{file.pid}#{DateTime.now.to_i}" # non-existing id
      get :download, {:id => id}
      response.status.should == 404
    end

    it 'should give a 500 error when wrong id format' do
      file = create_basic_file(nil)
      id = "#{file.pid}+#{DateTime.now.to_s}" # wrong id format
      get :download, {:id => id}
      response.status.should == 500
    end
  end

  describe 'Update preservation profile metadata' do
    before(:each) do
      @file = create_basic_file(nil)
    end
    it 'should have a default preservation settings' do
      b = BasicFile.find(@file.pid)
      b.preservation_profile.should_not be_blank
      b.preservation_state.should_not be_blank
      b.preservation_details.should_not be_blank
      b.preservation_modify_date.should_not be_blank
      b.preservation_comment.should be_blank
    end

    it 'should be updated and redirect to the file' do
      profile = PRESERVATION_CONFIG["preservation_profile"].keys.first
      comment = "This is the preservation comment"

      put :update_preservation_profile, {:id => @file.pid, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should redirect_to(@file)

      b = BasicFile.find(@file.pid)
      b.preservation_state.should_not be_blank
      b.preservation_details.should_not be_blank
      b.preservation_modify_date.should_not be_blank
      b.preservation_profile.should == profile
      b.preservation_comment.should == comment
    end

    it 'should not update or redirect, when the profile is wrong.' do
      profile = "wrong profile #{Time.now.to_s}"
      comment = "This is the preservation comment"

      put :update_preservation_profile, {:id => @file.pid, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should_not redirect_to(@file)

      b = BasicFile.find(@file.pid)
      b.preservation_state.should_not be_blank
      b.preservation_details.should_not be_blank
      b.preservation_modify_date.should_not be_blank
      b.preservation_profile.should_not == profile
      b.preservation_comment.should_not == comment
    end

    it 'should update the preservation date' do
      profile = PRESERVATION_CONFIG["preservation_profile"].keys.first
      comment = "This is the preservation comment"
      b = BasicFile.find(@file.pid)
      d = b.preservation_modify_date

      put :update_preservation_profile, {:id => @file.pid, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should redirect_to(@file)

      b = BasicFile.find(@file.pid)
      b.preservation_modify_date.should_not == d
    end

    it 'should not update the preservation date, when the same profile and comment is given.' do
      profile = PRESERVATION_CONFIG["preservation_profile"].keys.first
      comment = "This is the preservation comment"
      @file.preservation_profile = profile
      @file.preservation_comment = comment
      @file.save

      b = BasicFile.find(@file.pid)
      d = b.preservation_modify_date

      put :update_preservation_profile, {:id => @file.pid, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should redirect_to(@file)

      b = BasicFile.find(@file.pid)
      b.preservation_modify_date.should == d
    end

    it 'should send a message, when performing preservation' do
      profile = PRESERVATION_CONFIG["preservation_profile"].keys.first
      comment = "This is the preservation comment"
      destination = MQ_CONFIG["preservation"]["destination"]
      uri = MQ_CONFIG["mq_uri"]

      conn = Bunny.new(uri)
      conn.start

      ch = conn.create_channel
      q = ch.queue(destination, :durable => true)

      put :update_preservation_profile, {:id => @file.pid, :commit => Constants::PERFORM_PRESERVATION_BUTTON, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should redirect_to(@file)

      q.subscribe do |delivery_info, metadata, payload|
        payload.should include @file.pid
        json = JSON.parse(payload)
        json.keys.should include ('UUID')
        json.keys.should include ('Preservation_profile')
        json.keys.should include ('Update_URI')
        json.keys.should include ('File_UUID')
        json.keys.should include ('Content_URI')
        json.keys.should include ('metadata')
        json['metadata'].keys.each do |k|
          @file.datastreams.keys.should include k
          Constants::NON_RETRIEVABLE_DATASTREAM_NAMES.should_not include k
        end
      end

      b = BasicFile.find(@file.pid)
      b.preservation_state.should == Constants::PRESERVATION_STATE_INITIATED.keys.first
      b.preservation_comment.should == comment
      sleep 1.seconds
      conn.close
    end
  end

  describe 'Update preservation metadata' do
    before(:each) do
      @file = create_basic_file(nil)
    end
    it 'should be updated and redirect to the file' do
      state = "TheNewState-#{Time.now.to_s}"
      details = "Any details will suffice."

      post :update_preservation_metadata, {:id => @file.pid, :preservation => {:preservation_state => state, :preservation_details => details }}
      response.status.should == 200

      b = BasicFile.find(@file.pid)
      b.preservation_state.should == state
      b.preservation_details.should == details
      b.preservation_modify_date.should_not be_blank
      b.preservation_profile.should_not be_blank
    end

    it 'should change the values when updating' do
      old_state = "TheOldState-#{Time.now.to_s}"
      new_state = "tHEnEWsTATE-#{Time.now.to_s}"
      old_details = "Any details will suffice."
      new_details = "No details are accepted!"

      b = BasicFile.find(@file.pid)
      b.preservation_state = old_state
      b.preservation_details = old_details
      b.save!

      d = b.preservation_modify_date

      b = BasicFile.find(@file.pid)
      b.preservation_state.should == old_state
      b.preservation_state.should_not == new_state
      b.preservation_details.should == old_details
      b.preservation_details.should_not == new_details

      post :update_preservation_metadata, {:id => @file.pid, :preservation => {:preservation_state => new_state, :preservation_details => new_details }}
      response.status.should == 200

      b = BasicFile.find(@file.pid)
      b.preservation_state.should == new_state
      b.preservation_state.should_not == old_state
      b.preservation_details.should == new_details
      b.preservation_details.should_not == old_details
      b.preservation_modify_date.should_not == d
    end

    it 'should not update when same values' do
      state = "TheState-#{Time.now.to_s}"
      details = "TheDetails-#{Time.now.to_s}"

      b = BasicFile.find(@file.pid)
      b.preservation_state = state
      b.preservation_details = details
      b.save!

      d = b.preservation_modify_date

      post :update_preservation_metadata, {:id => @file.pid, :preservation => {:preservation_state => state, :preservation_details => details }}
      response.status.should == 200

      b = BasicFile.find(@file.pid)
      b.preservation_state.should == state
      b.preservation_details.should == details
      b.preservation_modify_date.should == d
    end

    it 'should be able to update only the warc id' do
      warc_id = "WarcId-#{Time.now.to_s}"

      b = BasicFile.find(@file.pid)
      state = b.preservation_state
      details = b.preservation_details
      b.save!

      d = b.preservation_modify_date

      post :update_preservation_metadata, {:id => @file.pid, :preservation => {:warc_id => warc_id}}
      response.status.should == 200

      b = BasicFile.find(@file.pid)
      b.preservation_state.should == state
      b.preservation_details.should == details
      b.warc_id.should == warc_id
      b.preservation_modify_date.should_not == d
    end

    it 'should give a 400 error response, if the message is incomplete' do
      post :update_preservation_metadata, {:id => @file.pid}
      response.status.should == 400
    end

    it 'should give a 404 error response, if the message is pointing to non-existing file' do
      id = "#{@file.pid}#{DateTime.now.to_i}" # non-existing id
      post :update_preservation_metadata, {:id => id, :preservation => {:warc_id => "warc_id"}}
      response.status.should == 404
    end

    it 'should give a 500 error response, if the message contains incorrect id' do
      id = "#{@file.pid}+#{DateTime.now.to_s}" # wrong id format
      post :update_preservation_metadata, {:id => id, :preservation => {:warc_id => "warc_id"}}
      response.status.should == 500
    end
  end

  after(:all) do
    BasicFile.all.each { |file| file.delete }
  end
end
