require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SingleFileInstancesController do
  #Login a test user with admin rights
  before(:each) do
    login_admin
  end

  # This should return the minimal set of attributes required to create a valid
  # SingleFileInstance. As you add validations to SingleFileInstance, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {  }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SingleFileInstancesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET show" do
    it "assigns the requested single_file_instance as @single_file_instance" do
      single_file_instance = SingleFileInstance.create! valid_attributes
      get :show, {:id => single_file_instance.to_param}, valid_session
      assigns(:single_file_instance).should eq(single_file_instance)
    end
  end

  describe "GET edit" do
    it "assigns the requested single_file_instance as @single_file_instance" do
      single_file_instance = SingleFileInstance.create! valid_attributes
      get :edit, {:id => single_file_instance.to_param}, valid_session
      assigns(:single_file_instance).should eq(single_file_instance)
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested single_file_instance" do
        single_file_instance = SingleFileInstance.create! valid_attributes
        # Assuming there are no other single_file_instances in the database, this
        # specifies that the SingleFileInstance created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        SingleFileInstance.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
        put :update, {:id => single_file_instance.to_param, :single_file_instance => { "these" => "params" }}, valid_session
      end

      it "assigns the requested single_file_instance as @single_file_instance" do
        single_file_instance = SingleFileInstance.create! valid_attributes
        put :update, {:id => single_file_instance.to_param, :single_file_instance => valid_attributes}, valid_session
        assigns(:single_file_instance).should eq(single_file_instance)
      end

      it "redirects to the single_file_instance" do
        single_file_instance = SingleFileInstance.create! valid_attributes
        put :update, {:id => single_file_instance.to_param, :single_file_instance => valid_attributes}, valid_session
        response.should redirect_to(single_file_instance)
      end
    end

    describe "with invalid params" do
      it "assigns the single_file_instance as @single_file_instance" do
        single_file_instance = SingleFileInstance.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SingleFileInstance.any_instance.stub(:save).and_return(false)
        put :update, {:id => single_file_instance.to_param, :single_file_instance => {  }}, valid_session
        assigns(:single_file_instance).should eq(single_file_instance)
      end

      it "re-renders the 'edit' template" do
        single_file_instance = SingleFileInstance.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SingleFileInstance.any_instance.stub(:save).and_return(false)
        put :update, {:id => single_file_instance.to_param, :single_file_instance => {  }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe 'Update preservation profile metadata' do
    before(:each) do
      @ins = SingleFileInstance.create!
    end
    it 'should have a default preservation settings' do
      ins = SingleFileInstance.find(@ins.pid)
      ins.preservation_profile.should_not be_blank
      ins.preservation_state.should_not be_blank
      ins.preservation_details.should_not be_blank
      ins.preservation_modify_date.should_not be_blank
      ins.preservation_comment.should be_blank
    end

    it 'should be updated and redirect to the single basic_files instance' do
      profile = PRESERVATION_CONFIG["preservation_profile"].keys.last
      comment = "This is the preservation comment"

      put :update_preservation_profile, {:id => @ins.pid, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should redirect_to(@ins)

      ins = SingleFileInstance.find(@ins.pid)
      ins.preservation_state.should_not be_blank
      ins.preservation_details.should_not be_blank
      ins.preservation_modify_date.should_not be_blank
      ins.preservation_profile.should == profile
      ins.preservation_comment.should == comment
    end

    it 'should not update or redirect, when the profile is wrong.' do
      profile = "wrong profile #{Time.now.to_s}"
      comment = "This is the preservation comment"

      put :update_preservation_profile, {:id => @ins.pid, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should_not redirect_to(@ins)

      ins = SingleFileInstance.find(@ins.pid)
      ins.preservation_state.should_not be_blank
      ins.preservation_details.should_not be_blank
      ins.preservation_modify_date.should_not be_blank
      ins.preservation_profile.should_not == profile
      ins.preservation_comment.should_not == comment
    end

    it 'should update the preservation date' do
      profile = PRESERVATION_CONFIG["preservation_profile"].keys.last
      comment = "This is the preservation comment"
      ins = SingleFileInstance.find(@ins.pid)
      d = ins.preservation_modify_date

      put :update_preservation_profile, {:id => @ins.pid, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should redirect_to(@ins)

      ins = SingleFileInstance.find(@ins.pid)
      ins.preservation_modify_date.should_not == d
    end

    it 'should not update the preservation date, when the same profile and comment is given.' do
      profile = PRESERVATION_CONFIG["preservation_profile"].keys.last
      comment = "This is the preservation comment"
      @ins.preservation_profile = profile
      @ins.preservation_comment = comment
      @ins.save

      ins = SingleFileInstance.find(@ins.pid)
      d = ins.preservation_modify_date

      put :update_preservation_profile, {:id => @ins.pid, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should redirect_to(@ins)

      ins = SingleFileInstance.find(@ins.pid)
      ins.preservation_modify_date.should == d
    end

    it 'should send a message, when performing preservation and the profile has Yggdrasil set to true' do
      profile = PRESERVATION_CONFIG["preservation_profile"].keys.last
      PRESERVATION_CONFIG['preservation_profile'][profile]['yggdrasil'].should == 'true'
      comment = "This is the preservation comment"
      destination = MQ_CONFIG["preservation"]["destination"]
      uri = MQ_CONFIG["mq_uri"]

      conn = Bunny.new(uri)
      conn.start

      ch = conn.create_channel
      q = ch.queue(destination, :durable => true)

      put :update_preservation_profile, {:id => @ins.pid, :commit => Constants::PERFORM_PRESERVATION_BUTTON, :preservation => {:preservation_profile => profile, :preservation_comment => comment }}
      response.should redirect_to(@ins)

      q.subscribe do |delivery_info, metadata, payload|
        metadata[:type].should == Constants::MQ_MESSAGE_TYPE_PRESERVATION_REQUEST
        payload.should include @ins.pid
        json = JSON.parse(payload)
        json.keys.should include ('UUID')
        json.keys.should include ('Preservation_profile')
        json.keys.should include ('Valhal_ID')
        json.keys.should_not include ('File_UUID')
        json.keys.should_not include ('Content_URI')
        json.keys.should include ('Model')
        json.keys.should include ('metadata')
        json['metadata'].keys.each do |k|
          @ins.datastreams.keys.should include k
          Constants::NON_RETRIEVABLE_DATASTREAM_NAMES.should_not include k
        end
      end

      ins = SingleFileInstance.find(@ins.pid)
      ins.preservation_state.should == Constants::PRESERVATION_STATE_INITIATED.keys.first
      ins.preservation_comment.should == comment
      sleep 1.second
      conn.close
    end

    it 'should not send a message, when performing preservation and the profile has Yggdrasil set to false' do
      profile = PRESERVATION_CONFIG['preservation_profile'].keys.first
      PRESERVATION_CONFIG['preservation_profile'][profile]['yggdrasil'].should == 'false'
      comment = 'This is the preservation comment'

      put :update_preservation_profile, {:id => @ins.pid, :commit => Constants::PERFORM_PRESERVATION_BUTTON,
                                         :preservation => {:preservation_profile => profile,
                                                           :preservation_comment => comment }}
      response.should redirect_to(@ins)

      ins = SingleFileInstance.find(@ins.pid)
      ins.preservation_state.should == Constants::PRESERVATION_STATE_NOT_LONGTERM.keys.first
      ins.preservation_comment.should == comment
    end

    it 'should send inheritable settings to the files' do
      file = create_basic_file(nil)
      @ins.files << file
      @ins.save!
      file.save!

      profile = PRESERVATION_CONFIG["preservation_profile"].keys.last
      comment = "This is the preservation comment-#{Time.now.to_s}"

      put :update_preservation_profile, {:id => @ins.pid, :commit => Constants::PERFORM_PRESERVATION_BUTTON, :preservation =>
          {:preservation_profile => profile, :preservation_comment => comment, :preservation_inheritance => '1'}}

      bf = BasicFile.find(file.pid)
      bf.preservation_state.should_not be_blank
      bf.preservation_details.should_not be_blank
      bf.preservation_modify_date.should_not be_blank
      bf.preservation_profile.should == profile
      bf.preservation_comment.should == comment

      ins = SingleFileInstance.find(@ins.pid)
      ins.preservation_state.should_not be_blank
      ins.preservation_details.should_not be_blank
      ins.preservation_modify_date.should_not be_blank
      ins.preservation_profile.should == profile
      ins.preservation_comment.should == comment
    end
  end

  describe 'GET preservation' do
    it 'should assign \'@ins\' to the single_file_instance' do
      @ins = SingleFileInstance.create!
      get :preservation, {:id => @ins.pid}
      assigns(:single_file_instance).should eq(@ins)
    end
  end

  after(:all) do
    BasicFile.all.each { |bf| bf.delete }
    TiffFile.all.each { |tf| tf.delete }
    SingleFileInstance.all.each { |ins| ins.delete }
  end
end
